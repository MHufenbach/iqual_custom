<?php

/**
 * @file
 * Install, update and uninstall functions for the iqual module.
 */

use Drupal\Core\Field\Entity\BaseFieldOverride;
use Drupal\Core\Language\LanguageInterface;
use Drupal\linkit\Entity\Profile;
use Drupal\linkit\SuggestionManager;
use Drupal\pagedesigner\Entity\Element;
use Drupal\user\Entity\Role;

/**
 * Apply changes to configuration / environment on installation.
 */
function iqual_install() {
  _set_iqual_base_settings();
  $author = Role::load('author');
  if ($author) {
    $author->grantPermission('restful get frontendpublishing_transitions');
    $author->grantPermission('restful patch frontendpublishing_transitions');
    $author->grantPermission('restful patch frontendpublishing_move');
    $author->grantPermission('restful patch frontendpublishing_publish');
    $author->grantPermission('restful patch frontendpublishing_unpublish');
    $author->grantPermission('restful patch frontendpublishing_copy');
    $author->grantPermission('restful post frontendpublishing_copy');
    $author->save();
  }

  $editor = Role::load('editor');
  if ($editor) {
    $editor->grantPermission('restful get frontendpublishing_transitions');
    $editor->grantPermission('restful patch frontendpublishing_transitions');
    $editor->grantPermission('restful patch frontendpublishing_move');
    $editor->grantPermission('restful patch frontendpublishing_publish');
    $editor->grantPermission('restful patch frontendpublishing_unpublish');
    $editor->grantPermission('restful patch frontendpublishing_copy');
    $editor->grantPermission('restful post frontendpublishing_copy');
    $editor->save();
  }

  $designer = Role::load('designer');
  if ($designer) {
    $designer->grantPermission('restful get frontendpublishing_transitions');
    $designer->grantPermission('restful patch frontendpublishing_transitions');
    $designer->grantPermission('restful patch frontendpublishing_move');
    $designer->grantPermission('restful patch frontendpublishing_publish');
    $designer->grantPermission('restful patch frontendpublishing_unpublish');
    $designer->grantPermission('restful patch frontendpublishing_copy');
    $designer->grantPermission('restful post frontendpublishing_copy');
    $designer->save();
  }
}

/**
 * Set the base settings for iqual websites.
 */
function _set_iqual_base_settings() {
  $config = \Drupal::service('config.factory')->getEditable('pagedesigner.settings');
  $config->set('filter_format_longtext', 'plain_text');

  // Weitere Config setzen.
  $config->set('exclude_dom_elements_before', '#header');
  $config->set('exclude_dom_elements_after', 'footer');

  $config->set('loading_screen', [
    'format' => 'pagedesigner',
    'value' => '<p>Pagedesigner lädt</p>',
  ]);

  $config->save();

  // Disable search pattern.
  $author = Role::load('author');
  if ($author) {
    $author->revokePermission('use pattern search');
    $author->save();
  }

  $editor = Role::load('editor');
  if ($editor) {
    $editor->revokePermission('use pattern search');
    $editor->save();
  }

  $designer = Role::load('designer');
  if ($designer) {
    $designer->revokePermission('use pattern search');
    $designer->save();
  }
}

/**
 * Apply changes to configuration / environment on installation.
 */
function iqual_update_8001() {
  _set_iqual_base_settings();
}

/**
 * Update the composer patches file with www redirection patch.
 */
function iqual_update_8002() {
  $patchFile = 'composer.patches.json';
  $modulePath = \Drupal::service('extension.list.module')->getPath('iqual');

  // Store current directory and switch to /var/www.
  $currentDirectory = getcwd();
  chdir('/var/www');

  // Add composer patches file.
  exec('composer config extra.patches-file composer.patches.json');

  // Create patches directory.
  if (!is_dir('/var/www/patches/')) {
    mkdir('/var/www/patches/');
  }

  // Move www redirection patch patch.
  copy('/var/www/public/' . $modulePath . '/patches/20200512_redirect_domain_keep_path.patch', '/var/www/patches/20200512_redirect_domain_keep_path.patch');

  // Add patch to composer.patches.json.
  if (file_exists('/var/www/' . $patchFile)) {
    $currentJson = json_decode(file_get_contents('/var/www/' . $patchFile), TRUE, 512, JSON_THROW_ON_ERROR);
    $currentJson['patches']['drupal/redirect'] = ["Keep path on domain redirect" => "/var/www/patches/20200512_redirect_domain_keep_path.patch"];
    file_put_contents('/var/www/' . $patchFile, json_encode($currentJson, JSON_UNESCAPED_SLASHES));
  }
  else {
    file_put_contents('/var/www/' . $patchFile, '{"patches": {"drupal/redirect": {"Keep path on domain redirect": "/var/www/patches/20200512_redirect_domain_keep_path.patch"}}}');
  }

  // Change back to working directory.
  chdir($currentDirectory);

}

/**
 * Update the container translation config and set correct entity reference.
 */
function iqual_update_8003() {

  // Update configuration for container translations.
  _iqual_update_8003_set_container_field_override('entity');
  _iqual_update_8003_set_container_field_override('user_id');
  _iqual_update_8003_set_container_field_override('container');
  _iqual_update_8003_set_container_field_override('parent');

  // Make sure that container translations are correct.
  $eids = \Drupal::entityQuery('pagedesigner_element')->condition('type', 'container')->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('pagedesigner_element');
  // Update all children.
  foreach ($eids as $eid) {
    /** @var \Drupal\pagedesigner\Entity\Element $container */
    $container = $storage->load($eid);
    $languages = \Drupal::service('language_manager')->getLanguages(LanguageInterface::STATE_ALL);
    foreach ($languages as $language) {
      if ($container->hasTranslation($language->getId())) {
        $containerTranslation = $container->getTranslation($language->getId());
        $containerTranslation->user_id->target_id = $container->user_id->target_id;
        $containerTranslation->entity->target_id = $container->entity->target_id;
        $containerTranslation->save();
        _iqual_update_8003_set_entity($containerTranslation, $container);
      }
    }
    $storage->resetCache([$container->id()]);
  }
}

/**
 * Create or adapt the base field override (translatable) on container fields.
 */
function _iqual_update_8003_set_container_field_override($fieldName) {
  $override = BaseFieldOverride::loadByName('pagedesigner_element', 'container', $fieldName);
  if (empty($override)) {
    $fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions('pagedesigner_element');
    foreach ($fields as $id => $field) {
      if ($id == $fieldName) {
        $override = BaseFieldOverride::createFromBaseFieldDefinition($field, 'container');
      }
    }
  }
  $override->setTranslatable(FALSE);
  $override->save();
}

/**
 * Update the entity based on the container.
 */
function _iqual_update_8003_set_entity(Element $element, $container) {
  if ($element->entity->target_id != $container->entity->target_id) {
    $element->entity->target_id = $container->entity->target_id;
    $element->save();
  }
  foreach ($element->children as $item) {
    _iqual_update_8003_set_entity($item->entity, $container);
  }
  if ($element->hasField('field_styles')) {
    foreach ($element->field_styles as $item) {
      _iqual_update_8003_set_entity($item->entity, $container);
    }
  }
  \Drupal::entityTypeManager()->getStorage('pagedesigner_element')->resetCache([$element->id()]);
}

/**
 * Remove path_alias entitites where alias is NULL.
 */
function iqual_update_9000(&$sandbox) {
  $storageManager = \Drupal::entityTypeManager()->getStorage('path_alias');
  $query = $storageManager->getQuery()->accessCheck(FALSE);
  $results = $query->condition('alias', NULL, 'IS')->execute();
  $entities = $results ? $storageManager->loadMultiple($results) : [];
  $storageManager->delete($entities);
}

/**
 * Set loading screen text of pagedesigner.
 */
function iqual_update_9001(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('filter_format');
  $textformat = $storage->load('iqual');
  if (empty($textformat)) {
    $textformat = $storage->load('pagedesigner');
  }
  $config = \Drupal::configFactory()->getEditable('pagedesigner.settings');

  if (empty($config->get('loading_screen')) && empty($config->get('loading_screen')['value'])) {
    $config->set('loading_screen',
     [
       "value" => "<p>Pagedesigner lädt</p>",
       "format" => $textformat->id(),
     ])->save();
  }
}

/**
 * Hide all cookieconsent blocks in pagedesigner.
 */
function iqual_update_9003(&$sandbox) {
  $blocks = \Drupal::entityTypeManager()->getStorage('block')->loadMultiple();
  /** @var \Drupal\block\Entity\Block $block */
  foreach ($blocks as $block) {
    if (str_contains('cookieconsent', (string) $block->get('id'))
      || str_contains($block->label(), 'Cookie-Consent')
      || str_contains('cookiebanner', (string) $block->get('id'))
      || str_contains($block->label(), 'Cookiebanner')) {
      echo $block->label();
      $block->setVisibilityConfig(
      'pagedesigner_condition',
      [
        'id' => 'pagedesigner_condition',
        'pagedesigner_condition' => TRUE,
        'negate' => NULL,
        'context_mapping' => [],
      ]
      );
      $block->save();
    }
  }
}

/**
 * Install exif_orientation module.
 */
function iqual_update_9004(&$sandbox) {
  $moduleList = \Drupal::service('extension.list.module');
  if ($moduleList->exists('exif_orientation')) {
    \Drupal::service('module_installer')->install(['exif_orientation']);
  }
}

/**
 * Enable linkit on html editors used in pagedesigner.
 */
function iqual_update_9005(&$sandbox) {
  /** @var \Drupal\Core\Extension\ModuleHandler $module_handler  */
  $module_handler = \Drupal::service('module_handler');
  if ($module_handler->moduleExists('pagedesigner') && $module_handler->moduleExists('linkit')) {

    // Load html filter formats from pagedesigner.
    $pagedesigner_settings = \Drupal::config('pagedesigner.settings');
    $format_ids = array_unique(
      [
        $pagedesigner_settings->get('filter_format'),
        $pagedesigner_settings->get('filter_format_textarea'),
      ]
    );
    /** @var \Drupal\filter\Entity\FilterFormat[] $formats */
    $formats = \Drupal::entityTypeManager()->getStorage('filter_format')->loadMultiple($format_ids);

    // Enable linkit filter.
    foreach ($formats as $format) {
      $format->setFilterConfig('linkit',
      ['status' => TRUE, 'weight' => 0, 'settings' => ['title' => TRUE]]
      );
      $format->save();
    }
  }
}

/**
 * Set claro as backend theme.
 */
function iqual_update_10000(&$sandbox) {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->getEditable('system.theme');
  if ($config->get('admin') == 'adminimal_theme') {
    // Make sure the theme is installed.
    /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
    $theme_installer = \Drupal::service('theme_installer');
    $theme_installer->install(['claro']);

    // Set it as the admin theme.
    $config->set('admin', 'claro')->save();

    $theme_installer->uninstall(['seven', 'adminimal_theme']);
  }
}

/**
 * Set the default return code for new unpublished nodes status setting.
 */
function iqual_update_10001(&$sandbox) {
  \Drupal::configFactory()->getEditable('iqual.settings')
    ->set('entity_unpublished_status', 403)
    ->save();
}

/**
 * Correct missing meta data in links due to linkit/bootstrap conflict.
 *
 * @see https://www.drupal.org/project/linkit/issues/3105061
 */
function iqual_update_10002(&$sandbox) {

  /** @var \Drupal\linkit\SuggestionManager $manager */
  $manager = \Drupal::service('linkit.suggestion_manager');
  $linkit_profile = Profile::load('default_linkit');

  // Load elements containing links.
  $query = \Drupal::database()->select('pagedesigner_element__field_content', 'c');
  $query->addField('c', 'entity_id');
  $query->addField('c', 'field_content_value');
  $query->where("c.field_content_value LIKE '%<a href=\"/%'");
  $res = $query->execute();

  if ($res) {
    libxml_use_internal_errors(TRUE);
    while ($row = $res->fetchObject()) {
      $element = Element::load($row->entity_id);
      $dom = new \DOMDocument();
      $text = mb_convert_encoding($element->field_content->value, 'HTML-ENTITIES', 'UTF-8');
      $dom->loadHTML($text, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD | LIBXML_NOWARNING);
      if (_iqual_update_10000_fix_html($dom, $manager, $linkit_profile)) {
        $element->field_content->value = $dom->saveHTML();
        $element->save();
      }
    }
    libxml_use_internal_errors(FALSE);
  }
}

/**
 * Recursively adds linkit meta data to links in the text.
 *
 * @param \DOMDocument $dom
 *   A DOM document.
 * @param \Drupal\linkit\SuggestionManager $suggestionManager
 *   The linkit suggestion manager.
 * @param \Drupal\linkit\Entity\Profile $linkit_profile
 *   The linkit profile to use.
 */
function _iqual_update_10000_fix_html(\DOMDocument &$dom, SuggestionManager $suggestionManager, Profile $linkit_profile) {
  $changed = FALSE;
  /** @var \DOMElement $child */
  foreach ($dom->getElementsByTagName('a') as $child) {
    $href = $child->getAttribute('href');
    $uuid = $child->getAttribute('data-entity-uuid');
    $matches = [];
    if (empty($uuid) && preg_match("/\/*[a-z]*?\/.*?\/[0-9]+$/", $href, $matches) === 1) {
      /** @var \Drupal\linkit\Suggestion\SuggestionInterface[] $sugggestions */
      $suggestions = $suggestionManager->getSuggestions($linkit_profile, $matches[0])->getSuggestions();
      $suggestion = reset($suggestions);
      if ($suggestion) {
        $values = $suggestion->jsonSerialize();
        $child->setAttribute('data-entity-substitution', $values['substitution_id']);
        $child->setAttribute('data-entity-type', $values['entity_type_id']);
        $child->setAttribute('data-entity-uuid', $values['entity_uuid']);
        if (empty($child->getAttribute('title'))) {
          $child->setAttribute('title', $values['label']);
        }
        $changed = TRUE;
      }
    }
  }
  return $changed;
}
